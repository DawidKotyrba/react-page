{"version":3,"sources":["WeatherList.js","Weather.js","App.js","serviceWorker.js","index.js"],"names":["element","icon","faLocationArrow","WeatherList","props","listItem","weatherArray","map","weather","index","rot","wind","key","className","style","transform","city","temperature","pressure","Weather","inputChange","e","inputVal","target","value","filtrCities","val","filteredArray","state","filter","citvObj","toUpperCase","includes","setState","filteredCitiWeather","getData","fetch","then","resp","json","data","newWeatherArray","currencyArray","id","stacja","temperatura","kierunek_wiatru","cisnienie","push","this","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wRAIMA,EAAU,kBAAC,IAAD,CAAiBC,KAAMC,MA0BxBC,EAvBK,SAAAC,GAChB,IAAMC,EAAWD,EAAME,aAAaC,KAAI,SAACC,EAASC,GAC9C,IAAIC,EAAsB,GAAfF,EAAQG,KACnB,OAEI,yBAAKC,IAAKH,EAAOI,UAAW,aAA5B,kBACI,yBAAKA,UAAW,QAASC,MAAO,CAAEC,UAAW,WAAaL,EAAM,SAC3DV,GAEL,4BAAKQ,EAAQQ,MACb,2CAAiBR,EAAQS,aACzB,8CAAeT,EAAQU,cAInC,OACI,yBAAKL,UAAW,QACXR,IC+CEc,E,kDAlEX,aAAe,IAAD,8BACV,gBAOJC,YAAc,SAAAC,GACV,IAAIC,EAAWD,EAAEE,OAAOC,MACxB,EAAKC,YAAYH,IAVP,EAYdG,YAAc,SAAAC,GACV,IAAIC,EAAgB,EAAKC,MAAMtB,aAAauB,QAAO,SAAAC,GAC/C,OAAOA,EAAQd,KAAKe,cAAcC,SAASN,EAAIK,kBAEnD,EAAKE,SAAS,CAAEC,oBAAqBP,KAhB3B,EAmBdQ,QAAU,WACNC,MAAM,gDACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF,IAAIC,EAAkB,GACtB,IAAK,IAAM7B,KAAO4B,EAAM,CACpB,IAAIE,EAAgB,GAEpBA,EAAcC,GAAK/B,EACnB8B,EAAc1B,KAAOwB,EAAK5B,GAAKgC,OAC/BF,EAAczB,YAAcuB,EAAK5B,GAAKiC,YACtCH,EAAc/B,KAAO6B,EAAK5B,GAAKkC,gBACD,OAA1BN,EAAK5B,GAAKiC,YACVH,EAAczB,YAAc,cAE5ByB,EAAczB,YAAcuB,EAAK5B,GAAKiC,YAAc,SAE5B,OAAxBL,EAAK5B,GAAKmC,UACVL,EAAcxB,SAAW,cAEzBwB,EAAcxB,SAAWsB,EAAK5B,GAAKmC,UAAY,OAGnDN,EAAgBO,KAAKN,GAEzB,EAAKT,SAAS,CAAE3B,aAAcmC,IAC9B,EAAKR,SAAS,CAAEC,oBAAqBO,QA3C7C,EAAKb,MAAQ,CACTtB,aAAc,GACd4B,oBAAqB,IAJf,E,gEAkDVe,KAAKd,Y,+BAIL,OACI,4BACI,8BACI,4CACA,2BAAOe,KAAK,OAAOC,SAAUF,KAAK7B,eAEtC,kBAAC,EAAD,CAAad,aAAc2C,KAAKrB,MAAMM,2B,GA9DhCkB,aCSPC,MARf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19c3e8f7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst element = <FontAwesomeIcon icon={faLocationArrow} />\r\n\r\n\r\nconst WeatherList = props => {\r\n    const listItem = props.weatherArray.map((weather, index) => {\r\n        let rot = -weather.wind + 90\r\n        return (\r\n\r\n            <div key={index} className={'list-item'}>Kierunek wiatru\r\n                <div className={'arrow'} style={{ transform: 'rotate( ' + rot + 'deg)' }}>\r\n                    {element}\r\n                </div>\r\n                <h2>{weather.city}</h2>\r\n                <p>Temperatura: {weather.temperature}</p>\r\n                <p>Ci≈õnienie: {weather.pressure}</p>\r\n            </div>\r\n        );\r\n    });\r\n    return (\r\n        <div className={'list'}>\r\n            {listItem}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default WeatherList;","import React, { Component } from 'react';\r\nimport WeatherList from './WeatherList';\r\n\r\nclass Weather extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            weatherArray: [],\r\n            filteredCitiWeather: []\r\n        };\r\n    };\r\n\r\n    inputChange = e => {\r\n        let inputVal = e.target.value\r\n        this.filtrCities(inputVal)\r\n    }\r\n    filtrCities = val => {\r\n        let filteredArray = this.state.weatherArray.filter(citvObj => {\r\n            return citvObj.city.toUpperCase().includes(val.toUpperCase())\r\n        });\r\n        this.setState({ filteredCitiWeather: filteredArray })\r\n    };\r\n\r\n    getData = () => {\r\n        fetch('https://danepubliczne.imgw.pl/api/data/synop')\r\n            .then(resp => resp.json())\r\n            .then(data => {\r\n                let newWeatherArray = []\r\n                for (const key in data) {\r\n                    let currencyArray = {}\r\n\r\n                    currencyArray.id = key;\r\n                    currencyArray.city = data[key].stacja;\r\n                    currencyArray.temperature = data[key].temperatura;\r\n                    currencyArray.wind = data[key].kierunek_wiatru;\r\n                    if (data[key].temperatura === null) {\r\n                        currencyArray.temperature = 'Brak danych'\r\n                    } else {\r\n                        currencyArray.temperature = data[key].temperatura + ' \\xB0C'\r\n                    }\r\n                    if (data[key].cisnienie === null) {\r\n                        currencyArray.pressure = 'Brak danych'\r\n                    } else {\r\n                        currencyArray.pressure = data[key].cisnienie + ' hPa'\r\n                    }\r\n\r\n                    newWeatherArray.push(currencyArray)\r\n                };\r\n                this.setState({ weatherArray: newWeatherArray })\r\n                this.setState({ filteredCitiWeather: newWeatherArray })\r\n            });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getData()\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <h2>\r\n                <form >\r\n                    <h2>Wpisz miasto</h2>\r\n                    <input type=\"text\" onChange={this.inputChange} />\r\n                </form>\r\n                <WeatherList weatherArray={this.state.filteredCitiWeather} />\r\n            </h2>\r\n        )\r\n    };\r\n};\r\n\r\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Weather from './Weather';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}